<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddInCouldNotBeLoaded" xml:space="preserve">
    <value>The VBE Component manager add-in could not be loaded!
{0}</value>
    <comment>The argument is exception message</comment>
  </data>
  <data name="AddInMenuCouldNotBeCreated" xml:space="preserve">
    <value>Could not create VBE Components manager menu!
Please review the error message.
{0}</value>
    <comment>The argument is exception message</comment>
  </data>
  <data name="ApplicationMessageCaption" xml:space="preserve">
    <value>VBE Components manager</value>
  </data>
  <data name="ConfigIsNull" xml:space="preserve">
    <value>The instance of the configuration file cannot be null</value>
  </data>
  <data name="DefaultPathValue" xml:space="preserve">
    <value>Specify path to export</value>
  </data>
  <data name="ExceptionNoComponents" xml:space="preserve">
    <value>No components in the project</value>
  </data>
  <data name="ExportComExceptionText" xml:space="preserve">
    <value>Components could not be exported. 
A COM exception was thrown: {0}"</value>
    <comment>The argument is an error code</comment>
  </data>
  <data name="ExportConfirmation" xml:space="preserve">
    <value>You are going to export {0} {1}
Are you sure?</value>
    <comment>The first argument is number and the second argument is the text Item or Items</comment>
  </data>
  <data name="ExportFormMessageCaption" xml:space="preserve">
    <value>Export project components</value>
  </data>
  <data name="ExportNoItemSelected" xml:space="preserve">
    <value>Select at least one component to export!</value>
  </data>
  <data name="FolderDoesnExists" xml:space="preserve">
    <value>The given path doesn't exists!
{0}</value>
    <comment>The argument is full path to given folder</comment>
  </data>
  <data name="ImportAddFolder" xml:space="preserve">
    <value>Add a folder</value>
    <comment>Default text on comboxox on Import form</comment>
  </data>
  <data name="ImportConfirmation" xml:space="preserve">
    <value>You are going to import {0} {1}
Are you sure?</value>
    <comment>The first argument is number and the second argument is the text Item or Items</comment>
  </data>
  <data name="ImportFormMessageCaption" xml:space="preserve">
    <value>Import components</value>
  </data>
  <data name="ImportNoItemSelected" xml:space="preserve">
    <value>Select at least one component to import!</value>
  </data>
  <data name="InvalidComponentFolder" xml:space="preserve">
    <value>The selected folder doesn't have any valid VBA component!</value>
  </data>
  <data name="Item" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="NumberOfComponentsPlusSelected" xml:space="preserve">
    <value>Number of components: {0} ({1} selected)</value>
    <comment>The arguments represents numbers</comment>
  </data>
  <data name="PathIsNotValid" xml:space="preserve">
    <value>The given path is not valid!
Please correct.</value>
  </data>
  <data name="ProjectValidated" xml:space="preserve">
    <value>(valid, {0} components)</value>
    <comment>The argument is integer</comment>
  </data>
  <data name="ProjectValidating" xml:space="preserve">
    <value>(validating...)</value>
  </data>
  <data name="ProtectedProject" xml:space="preserve">
    <value>The selected project '{0}' is protected.
You cannot import/export anything to protected projects.</value>
    <comment>The argument is name of the selected project</comment>
  </data>
</root>